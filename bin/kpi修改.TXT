
#----kpi_1.15(不含首保保养台次_total)

function kpi_total_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_total_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_total_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_total_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code;"> ../testlog/kpi_total_${mon_p}_${kpi} 2>&1
  echo "kpi_total_${mon_p}_${kpi}  $?" >> ../testlog/res}
  
  
#----kpi_1.15(不含首保保养台次_一级)  
  function kpi_a_level_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_level_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_level_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_a_level_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res}
 
 
#----kpi_1.15(不含首保保养台次_二级)  
  function kpi_b_level_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ]
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_level_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_level_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_b_level_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  second_level_classification,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification,second_level_classification;" > ../logtest/kpi_b_level_${mon_p}_${kpi} 2>&1
  echo "kpi_b_level_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
  
#----kpi_1.15(不含首保保养台次_车龄)  
  function kpi_agetype_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
  insert overwrite table  kpi_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  age_type,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,age_type;" > ../logtest/kpi_agetype_${mon_p}_${kpi} 2>&1
  echo "kpi_agetype_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
#----kpi_1.15(不含首保保养台次_保内外)  
  function kpi_bnbw_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  bn,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,bn;" > ../logtest/kpi_bnbw_${mon_p}_${kpi} 2>&1
  echo "kpi_bnbw_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
#----kpi_1.15(不含首保保养台次_一级_车龄)  
  function kpi_a_agetype_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
  insert overwrite table  kpi_a_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  age_type,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification,age_type;" > ../logtest/kpi_a_agetype_${mon_p}_${kpi} 2>&1
  echo "kpi_a_agetype_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
  
#----kpi_1.15(不含首保保养台次_一级_保内外)  
  function kpi_a_bnbw_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_a_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  bn,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification,bn; " > ../logtest/kpi_a_bnbw_${mon_p}_${kpi} 2>&1
  echo "kpi_a_bnbw_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
#----kpi_1.15(不含首保保养台次_二级_车龄) 
  function kpi_b_agetype_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
  insert overwrite table  kpi_b_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  second_level_classification,
  age_type,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification,second_level_classification,age_type;" > ../logtest/kpi_b_agetype_${mon_p}_${kpi} 2>&1
  echo "kpi_b_agetype_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
#----kpi_1.15(不含首保保养台次_二级_保内外)  
  function kpi_b_bnbw_test_1_15(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_1_15"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_b_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'1.15' as kpi,
  primary_classification,
  second_level_classification,
  bn,
  substr(tran_date(order_balance_date),1,7) as mon,
  count(distinct vin,tran_date(order_balance_date)) as cnt,
  asc_code
   from label_order  
  where MAINT_TYPE1='保养'
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  and first_maintnance=''
  group by substr(tran_date(order_balance_date),1,7),asc_code,primary_classification,second_level_classification,bn;" > ../logtest/kpi_b_bnbw_${mon_p}_${kpi} 2>&1
  echo "kpi_b_bnbw_${mon_p}_${kpi}  $?" >> ../logtest/res}
  
  -------------------------------
  
  
#----kpi_0.1(售后配件总产值_total)
function kpi_total_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_total_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_total_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}';
  insert overwrite table  kpi_total_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'0.1' as kpi,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon;"> ../testlog/kpi_total_${mon_p}_${kpi} 2>&1
  echo "kpi_total_${mon_p}_${kpi}  $?" >> ../testlog/res
  
#----kpi_0_1(售后配件总产值_一级) 
  function kpi_a_level_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_level_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_level_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
  insert overwrite table  kpi_total_test partition(mon_p='${mon_p}',kpi='${kpi}')
  select ----'0.1' as kpi,t1.primary_classification,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,primary_classification,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
  
  
#----kpi_0_1(售后配件总产值_二级)  
function kpi_b_level_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_level_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_level_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_b_level_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.primary_classification,t1.second_level_classification,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,second_level_classification,primary_classification,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification,second_level_classification)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,second_level_classification,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification,second_level_classification)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification,
  t1.second_level_classification=t2.second_level_classification;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
    
  
#----kpi_0_1(售后配件总产值_车龄)  
function kpi_agetype_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.age_type,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,age_type,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,age_type)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,age_type,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,age_type)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.age_type=t2.age_type;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
  
#----kpi_0_1(售后配件总产值_保内外)  
function kpi_bnbw_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.bn,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,bn,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,bn)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,bn,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,bn)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.bn=t2.bn;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
#----kpi_0_1(售后配件总产值_一级_车龄)  
function kpi_a_agetype_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_a_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.primary_classification,t1.age_type,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,primary_classification,age_type,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification,age_type)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,age_type,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification,age_type)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification and t1.age_type=t2.age_type;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
#----kpi_0_1(售后配件总产值_一级_保内外)  
function kpi_a_bnbw_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_a_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_a_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_a_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.primary_classification,t1.bn,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,primary_classification,bn,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification,bn)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,bn,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification,bn)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification and t1.bn=t2.bn;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
  
#----kpi_0_1(售后配件总产值_二级_车龄)  
function kpi_b_agetype_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_agetype_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_agetype_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_b_agetype_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.primary_classification,t1.second_level_classification,t1.age_type,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,primary_classification,second_level_classification,age_type,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification,second_level_classification,age_type)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,second_level_classification,age_type,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification,second_level_classification,age_type)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification and t1.second_level_classification=t2.second_level_classification and t1.age_type=t2.age_type;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res
  
  
#----kpi_0_1(售后配件总产值_二级_保内外)  
function kpi_b_bnbw_test_0_1(){
 begin_date=$1
 end_date=$2
 if [ ${begin_date} = ${end_date} ] 
 then
  mon_p=${end_date}
 else
  mon_p=${begin_date}_${end_date}
 fi
 kpi="kpi_0_1"
  spark-sql --master yarn-client --driver-memory 3g --executor-memory 3g --num-executors 20 --executor-cores 1 -e "
  use ipsos;
  set spark.sql.crossJoin.enabled=true;
  add jar /home/ipsos/general/bin/transform-date.jar;
  CREATE TEMPORARY FUNCTION tran_date AS 'com.changxi.transformDate.TransformDate';
  CREATE TEMPORARY FUNCTION mon_diff AS 'com.changxi.transformDate.MonDiff';
  alter table kpi_b_bnbw_test drop if exists partition(mon_p='${mon_p}',kpi='${kpi}');
  alter table kpi_b_bnbw_test add partition (mon_p='${mon_p}',kpi='${kpi}') location '${mon_p}/${kpi}'; 
 insert overwrite table  kpi_b_bnbw_test partition(mon_p='${mon_p}',kpi='${kpi}')
   select ----'0.1' as kpi,t1.primary_classification,t1.second_level_classification,t1.bn,t1.mon,case 
  when t2.sumclaim is null then t1.sumpart
  else (t1.sumpart-t2.sumclaim) end as sumpart,t1.asc_code
  from (select substr(tran_date(t.order_balance_date),1,7) as mon,primary_classification,second_level_classification,bn,
  sum(t.sales_amount) as sumpart,t.asc_code from part t
   join label_order s on s.asc_code=t.asc_code and s.order_number=t.order_number
  where s.MAINT_TYPE1<>'删除' 
  and substr(tran_date(t.order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(t.order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(t.order_balance_date),1,7),t.asc_code,primary_classification,second_level_classification,bn)t1
  left join 
  (select substr(tran_date(s.order_balance_date),1,7) as mon,primary_classification,second_level_classification,bn,
  sum(t.claim_accepted_amount)+sum(t.claim_accepted_amount_tax) as sumclaim,
  s.asc_code
   from  label_order s join claim_uniq t 
   on s.asc_code=t.asc_code and s.claim_order_number=t.claim_order_number
  where s.MAINT_TYPE1<>'删除'
  and s.claim='1' 
  and substr(tran_date(order_balance_date),1,7)>='${begin_date}'
  and substr(tran_date(order_balance_date),1,7)<='${end_date}'
  group by substr(tran_date(s.order_balance_date),1,7),s.asc_code,primary_classification,second_level_classification,bn)t2
  on t1.asc_code=t2.asc_code and t1.mon=t2.mon and t1.primary_classification=t2.primary_classification and t1.second_level_classification=t2.second_level_classification and t1.bn=t2.bn;" > ../testlog/kpi_a_level_${mon_p}_${kpi} 2>&1
  echo "kpi_a_level_${mon_p}_${kpi}  $?" >> ../testlog/res